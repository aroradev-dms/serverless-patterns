AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  EmailParameter:
    Type: String
    Description: Email address for SNS subscription

Resources:
  VideoBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Delete

  InvokeModelPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 
              - bedrock:InvokeModel
              - bedrock:Get*
            Resource: 
              - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/*'
              - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:async-invoke/*'

  InvokeModelFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/functioncode.zip
      Handler: invoke.handler
      Runtime: python3.12
      Timeout: 900
      Environment:
        Variables:
          BUCKET_NAME: !Ref VideoBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref VideoBucket
        - !Ref InvokeModelPolicy

  FetchStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/functioncode.zip
      Handler: fetchstatus.handler
      Runtime: python3.12
      Timeout: 900
      Environment:
        Variables:
          BUCKET_NAME: !Ref VideoBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref VideoBucket
        - !Ref InvokeModelPolicy

  VideoGenerationTopic:
    Type: AWS::SNS::Topic

  TopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref VideoGenerationTopic
      Endpoint: !Ref EmailParameter

  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StepFunctionsPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: 
                  - !GetAtt InvokeModelFunction.Arn
                  - !GetAtt FetchStatusFunction.Arn
              - Effect: Allow
                Action: 
                  - sns:Publish
                  - bedrock:*
                Resource: 
                  - !Ref VideoGenerationTopic
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::*'

  VideoGenerationStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Role: !GetAtt StepFunctionsRole.Arn
      Definition:
        StartAt: StartVideoGeneration
        TimeoutSeconds: 900
        States:
          StartVideoGeneration:
            Type: Task
            Resource: !GetAtt InvokeModelFunction.Arn
            Next: WaitForVideoGeneration
          WaitForVideoGeneration:
            Type: Wait
            Seconds: 180
            Next: FetchStatusOfVideoGeneration
          FetchStatusOfVideoGeneration:
            Type: Task
            Resource: !GetAtt FetchStatusFunction.Arn
            Next: CheckStatus
          CheckStatus:
            Type: Choice
            Choices:
              - Variable: "$.Status"
                StringEquals: "Completed"
                Next: SNSSendMessage
              - Variable: "$.Status"
                StringEquals: "InProgress"
                Next: WaitForVideoGeneration
            Default: SNSSendMessage
          SNSSendMessage:
            Type: Task
            Resource: arn:aws:states:::sns:publish
            Parameters:
              TopicArn: !Ref VideoGenerationTopic
              Message.$: "$"
              Subject: "Pre-Signed URL for Video Generated by Bedrock Nova Reel Model"
            End: true

  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsStartExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !GetAtt VideoGenerationStateMachine.Arn

  VideoGeneratorApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: '2.0'
        info:
          title: Video Generator API
        paths:
          /generateVideo:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:states:action/StartExecution"
                credentials: !GetAtt ApiGatewayRole.Arn
                requestTemplates:
                  application/json: !Sub |
                    {
                      "input": "$util.escapeJavaScript($input.json('$'))",
                      "stateMachineArn": "${VideoGenerationStateMachine.Arn}"
                    }
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/json: |
                        {
                          "executionArn": "$util.parseJson($input.json('$')).executionArn",
                          "Result": "You will receive an email with pre-Signed URL in 4-5 minutes"
                        }
                passthroughBehavior: "WHEN_NO_TEMPLATES"
                httpMethod: "POST"
                type: "aws"
              responses:
                "200":
                  description: "Success"
                "500":
                  description: "Internal Server Error"

Outputs:
  S3GenerationBucket:
    Description: Name of the S3 bucket
    Value: !Ref VideoBucket
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${VideoGeneratorApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/generateVideo"
  StateMachineArn:
    Description: State Machine ARN
    Value: !GetAtt VideoGenerationStateMachine.Arn
